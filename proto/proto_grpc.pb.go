// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	RecieveMessage(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WrittenMessage, error)
	SendMessage(ctx context.Context, in *WrittenMessage, opts ...grpc.CallOption) (*WrittenMessage, error)
	LeaveServer(ctx context.Context, in *WrittenMessage, opts ...grpc.CallOption) (*WrittenMessage, error)
	JoinServer(ctx context.Context, in *WrittenMessage, opts ...grpc.CallOption) (*WrittenMessage, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) RecieveMessage(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WrittenMessage, error) {
	out := new(WrittenMessage)
	err := c.cc.Invoke(ctx, "/ChittyChat.chat/RecieveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMessage(ctx context.Context, in *WrittenMessage, opts ...grpc.CallOption) (*WrittenMessage, error) {
	out := new(WrittenMessage)
	err := c.cc.Invoke(ctx, "/ChittyChat.chat/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) LeaveServer(ctx context.Context, in *WrittenMessage, opts ...grpc.CallOption) (*WrittenMessage, error) {
	out := new(WrittenMessage)
	err := c.cc.Invoke(ctx, "/ChittyChat.chat/LeaveServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) JoinServer(ctx context.Context, in *WrittenMessage, opts ...grpc.CallOption) (*WrittenMessage, error) {
	out := new(WrittenMessage)
	err := c.cc.Invoke(ctx, "/ChittyChat.chat/JoinServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	RecieveMessage(context.Context, *EmptyMessage) (*WrittenMessage, error)
	SendMessage(context.Context, *WrittenMessage) (*WrittenMessage, error)
	LeaveServer(context.Context, *WrittenMessage) (*WrittenMessage, error)
	JoinServer(context.Context, *WrittenMessage) (*WrittenMessage, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) RecieveMessage(context.Context, *EmptyMessage) (*WrittenMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecieveMessage not implemented")
}
func (UnimplementedChatServer) SendMessage(context.Context, *WrittenMessage) (*WrittenMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServer) LeaveServer(context.Context, *WrittenMessage) (*WrittenMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveServer not implemented")
}
func (UnimplementedChatServer) JoinServer(context.Context, *WrittenMessage) (*WrittenMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinServer not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_RecieveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RecieveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.chat/RecieveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RecieveMessage(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrittenMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.chat/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMessage(ctx, req.(*WrittenMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_LeaveServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrittenMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LeaveServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.chat/LeaveServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LeaveServer(ctx, req.(*WrittenMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_JoinServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrittenMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).JoinServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.chat/JoinServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).JoinServer(ctx, req.(*WrittenMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChat.chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecieveMessage",
			Handler:    _Chat_RecieveMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Chat_SendMessage_Handler,
		},
		{
			MethodName: "LeaveServer",
			Handler:    _Chat_LeaveServer_Handler,
		},
		{
			MethodName: "JoinServer",
			Handler:    _Chat_JoinServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
